#!/usr/bin/env bash

# padloc :: A tool for identifying phage defence systems in prokaryotic genomes
# https://github.com/leightonpayne/padloc
# Copyright (c) 2020 Leighton Payne

# BASH STRICT MODE ------------------------------------------------------------

# Refer to: http://redsymbol.net/articles/unofficial-bash-strict-mode/

set -o nounset    # Unbound variables cause an error on parameter expansion.
set -o errexit    # Exit if a pipeline returns non-zero.
set -o errtrace   # Traps inherited by shell functions.
set -o pipefail   # Use the last non-zero exit code in a pipeline.
IFS=$'\n\t'       # Set wordsplitting to newline and tab.

# Trap on errexit
trap 'echo "$(date "+(%H:%M:%S)") ERROR  >>  errexit on line $LINENO" >&2' ERR

# SCRIPT UTILITIES ------------------------------------------------------------

# die <message>
# Print error message and exit.
die() {
  printf "\nERROR: \t %s\n" "$@" >&2 ; exit 1
} 

# debug <message>
# Print message when using debug.
debug() {
  if [[ "${USE_DEBUG:-"0"}" -eq 1 ]] ; then 
    printf "$(date "+(%H:%M:%S)") DEBUG  >>  ${@}"
  fi
}

# info <message>
# Print info message.
info() {
  printf "$(date "+(%H:%M:%S)") INFO   >>  ${@}"
}

# abspath <directory>
# Get the absolute path to a directory.
abspath() {
    [[ "${1}" = /* ]] && echo "${1}" || echo "$PWD/${1#./}"
}

# horiz || horiz <character> <number>
# Print a horizontal line the width of the terminal window or specified length.
horiz() {
    printf '%*s\n' "${2:-$(tput cols)}" '' | tr ' ' "${1:--}"
}

# HELP ------------------------------------------------------------------------

# help
# Print usage information.
help() {
cat << EOF

        ___       ___                           ___       ___   
       /  /\     /  /\     _____               /  /\     /  /\  
      /  /::\   /  /::\   /  /::\   ___  __   /  /::\   /  /:/_
     /  /:/:/  /  /:/::\ /  /:/\:\ /  /\/ /\ /  /:/\:\ /  /:/ /\\
     \  \::/   \  \::/\/ \  \:\/:/ \  \:\/:/ \  \:\/:/ \  \:\/:/
      \  \:\    \  \:\    \  \::/   \  \::/   \  \::/   \  \::/  
       \__\/     \__\/     \__\/     \__\/     \__\/     \__\/          

padloc :: A tool for identifying phage defence systems in prokaryotic genomes

Usage: 
    padloc [options] --fasta <f> --featbl <f> --out <d>

Required:
    --fasta <f>     
        Path to the input fasta file (*.faa) 
    --featbl <f>    
        Path to the input feature table file (*_feature_table.txt) 
    --out <d>       
        Path to the output directory <d>

Optional:
    --cpu <n>       
        Set number of cpus to <n>, the default is 1
    --raw-out       
        Include a summarised raw output file for each genome searched
    --append        
        Append the hmmer output to exisitng results in out_dir/domtblout/
    --cleanup
        Remove domtblout/ from the output directory if left over from 
        previous runs
    -h, --help      
        Display this help message
EOF
}

# OPTIONS ---------------------------------------------------------------------

# If no options given, print help.
[[ "${#}" = 0 ]] && help && exit 0

# Set defaults.
USE_DEBUG=0
CPU=1
RAW_OUT=0
APPEND_HMMER=0
QUIET=0
CLEANUP=0
HMM_DATABASE=""
FASTA_FILE=""
FASTA_NAME=""
FEATBL_FILE=""
OUT_DIR=""
DOMTBL_PATH=""
HMM_META=""
SYS_META=""
YAML_DIR=""

# require_argument <option> <argument>
# Die when <argument> is blank or another option.
require_argument() {
  local option="${1:-}"
  local argument="${2:-}"
  if [[ -z "${argument}" ]] || [[ "${argument}" =~ ^- ]]; then
    die "Option [${option}] requires an argument"
  fi
}

# Read options.
while [[ "${#}" -gt 0 ]]; do
  option="${1:-}"
  parameter="${2:-}"
  case "${option}" in
    -h|--help) help; exit 0 ;;
    -d|--debug) USE_DEBUG=1 ;;
    -q|--quiet) QUIET=1 ;;
    --fasta) require_argument "${option}" "${parameter}"
      FASTA_FILE=$(abspath "${parameter}") 
      FASTA_NAME=$(basename ${FASTA_FILE%.faa}) ; shift ;;
    --featbl) require_argument "${option}" "${parameter}"
      FEATBL_FILE=$(abspath "${parameter}") ; shift ;;
    -o|--out) require_argument "${option}" "${parameter}"
      OUT_DIR=$(abspath "${parameter}") ; shift ;;
    -c|--cpu) require_argument "${option}" "${parameter}"
      CPU="${parameter}" ; shift ;;
    -r|--raw-out) RAW_OUT=1 ;;
    -a|--append) APPEND_HMMER=1 ;;
    --cleanup) CLEANUP=1 ;;
    --endopts) break ;;
    *) die "Unexpected option: [${option}]" ;;
  esac
  shift
done

# CHECK OPTIONS ---------------------------------------------------------------

check_opt() {

  # check that FASTA file exists and is FASTA
  [[ -f "${FASTA_FILE}" && "${FASTA_FILE}" =~ .\.faa$ ]] || 
  die "Valid FASTA file required (*.faa)"

  # # check that feature table file exists and is feature table
  # [[ -f "${FEATBL_FILE}" && "${FEATBL_FILE}" =~ .\._feature_table.txt$ ]] || 
  # die "Valid feature table file required (*_feature_table.txt)"

  # check that output directory exists
  [[ -d "${OUT_DIR}" ]] || die "Valid output directory required"

  # check whether --cpu is a valid non-zero integer
  [[ "${CPU}" =~ ^-?[0-9]+$ && "${CPU}" -gt 0 ]] ||
  die "Number of cpus must be a non-zero integer"

  # print parameters for debug
  OPTIONS=(FASTA_FILE FEATBL_FILE OUT_DIR CPU RAW_OUT APPEND_HMMER)
  for i in "${OPTIONS[@]}"; do
    debug "\$${i}: ${!i}\n"
  done

}

hmmsearch_wrapper() {

  local accession=$(basename "${1%.faa}")
  DOMTBL_PATH="${OUT_DIR}/domtblout/${accession}.domtblout"

  # If not appending and domtblout already exists, skip - unless forcing
  if [[ "${APPEND_HMMER}" -eq 0 && -f "${DOMTBL_PATH}" ]] ; then
    info "${accession} already processed\n"
    local process="skip"
  # If not appending and domtblout doesn't exist, process as normal.
  elif [[ "${APPEND_HMMER}" -eq 0 && ! -f "${DOMTBL_PATH}" ]] ; then
    debug "Processing ${accession} @ $(date)...\n"
    local process="normal"
  # If appending and domtblout already exists, process and append.
  elif [[ "${APPEND_HMMER}" -eq 1 && -f "${DOMTBL_PATH}" ]] ; then
    debug "Processing ${accession} @ $(date)...\n"
    local process="append"
  # If appending and domtblout doesn't exist, process as normal.
  elif [[ "${APPEND_HMMER}" -eq 1 && ! -f "${DOMTBL_PATH}" ]] ; then
    debug "Processing ${accession} @ $(date)...\n"
    local process="normal"
  else
    die
  fi

  if [[ "${process}" == "normal" ]] ; then
    # Set output
    local output="${DOMTBL_PATH}"
    # Print command
    debug "hmmsearch --cpu ${CPU} --acc --noali --domtblout ${output} ${HMM_DATABASE} ${FASTA_FILE}\n"
    # Run hmmer, redirect stdout to /dev/null
    if hmmsearch --cpu "${CPU}" --acc --noali --domtblout "${output}" "${HMM_DATABASE}" "${FASTA_FILE}" > /dev/null; then
      debug "Finished @ $(date) ... SUCCESSFUL\n"
    else
      debug "Finished @ $(date) ... FAILED\n"
      die "hmmsearch failed"
    fi
  fi

  if [[ "${process}" == "append" ]] ; then
    # Set output
    local output="${DOMTBL_PATH}.tmp"
    # Print command
    debug "hmmsearch --cpu ${CPU} --acc --noali --domtblout ${output} ${HMM_DATABASE} ${FASTA_FILE}\n"
    # Run hmmer, redirect stdout to /dev/null
    if hmmsearch --cpu "${CPU}" --acc --noali --domtblout "${output}" "${HMM_DATABASE}" "${FASTA_FILE}" > /dev/null; then
      # If command runs successfully
      debug "Finished @ $(date) ... SUCCESSFUL\n"
      # Append to existing file
      cat "${output}" >> "${DOMTBL_PATH}" && rm "${output}"
    else
      debug "Finished @ $(date) ... FAILED\n"
      die "hmmsearch failed"
    fi
  fi

}

# MAIN ------------------------------------------------------------------------

# main
# Main program
main() { 

  printf "\n"

  # Check options
  check_opt

  # Locate source directory
  SRC_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" > /dev/null 2>&1 && pwd)"
  debug "\$SRC_DIR: ${SRC_DIR}\n"

  HMM_DATABASE="${SRC_DIR}/data/hmm/padlocDB.hmm"
  YAML_DIR="${SRC_DIR}/data/sys"
  HMM_META="${SRC_DIR}/data/hmm_meta.xlsx"
  SYS_META="${SRC_DIR}/data/sys_meta.xlsx"

  # Check that required R packages are installed
  Rscript "${SRC_DIR}/src/check_packages.R"
  # Stop if there were missing packages
  [[ $? -ne 0 ]] && exit 1
  debug "Required R packages are installed\n"

  ### Cleanup ###

  [[ "${CLEANUP}" -eq 1 && -d "${OUT_DIR}/domtblout" ]] \
  && rm -dr "${OUT_DIR}/domtblout"

  ### Run HMMER ###

  info "Scaning ${FASTA_NAME} for defence system proteins\n"

  mkdir -p "${OUT_DIR}/domtblout"

  hmmsearch_wrapper "${FASTA_FILE}"

  ### Run padloc.R ###
  
  info "Searching ${FASTA_NAME} for defence systems\n"

  Rscript "${SRC_DIR}/src/padloc.R" -d "${DOMTBL_PATH}" -f "${FEATBL_FILE}" \
  -a "${HMM_META}" -s "${SYS_META}" -y "${YAML_DIR}" -o "${OUT_DIR}" \
  -b "${USE_DEBUG}" -q "${QUIET}"

}

# Run main
main
